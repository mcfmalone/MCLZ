#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
This script was written to read a "cs" (cross section) file, which was generated by
"Stueckelberg", and plot it. It is intended to mimic the graphs produced by xmgrace.

$Id: plotcs.py,v 1.3 2019/02/27 02:08:30 micha Exp micha $
$Author: micha $
$Revision: 1.3 $
$Log: plotcs.py,v $
Revision 1.3  2019/02/27 02:08:30  micha
Added "-l" option to specify size of labels font.

Revision 1.2  2019/02/26 05:35:35  micha
Added ability to get label information from *.cs file. This data will nis used for legends. Also included "-t" option to display title on plot. Title data is taken from *cs file in the header section.

Revision 1.1  2019/02/16 01:37:49  micha
Initial revision

"""
from __future__ import unicode_literals
import sys
import os
import matplotlib.pyplot as plt
import numpy as np
import ntpath
import argparse
import matplotlib
from matplotlib import rc
import io
import re

plt.rcParams["font.family"]="Times New Roman"
plt.rcParams.update({"font.family": "Times New Roman"})
plt.rc("font",serif="Times New Roman")
matplotlib.rcParams["xtick.direction"]="in"
matplotlib.rcParams["ytick.direction"]="in"
"""
usage: ./plotcs.py [-h] [-s str] [-l float] [-q] [-t] [-v] str

Plot MCLZ cross-sections.

positional arguments:
  str         Input file.

optional arguments:
  -h, --help  Show help message and exit.
  -s str      Save image file.
  -l float    Legend font size.
  -q          Quiet; do not display plot.
  -t          Title.
  -v          Verbose. Intended for debugging.
"""

def MainMenu(argv):
    parser=argparse.ArgumentParser(description="Plot MCLZ cross-sections.",prog=sys.argv[0])
    parser.add_argument("InFile",help="Input file.",type=argparse.FileType('r'),metavar="str",default=sys.stdin)
    parser.add_argument("-s",help="Save image file.",type=str,metavar="str",dest="ImgFile")
    parser.add_argument("-l",help="Legend font size.",type=float,metavar="float",dest="l")
    parser.add_argument("-a",help="Axes font size.",type=float,metavar="float",dest="a")
    parser.add_argument("-q",help="Quiet; do not display plot.",action="store_true",dest="quiet")
    parser.add_argument("-t",help="Title.",action="store_true",dest="Title",default=False)
    parser.add_argument("-v",help="Verbose. Intended for debugging.",action="store_true",dest="Verbose",default=False)
    parser._actions[0].help="Show help message and exit."
    args=parser.parse_args(None if argv else ["-h"])
    if(args.Verbose):
        for i in vars(args):
            print("%s=%s"%(i,getattr(args,i)))
    return args

"""
data contains columns x y_0 ... y_n
labels is a list of strings which correspond to the data columns.
title is a string that contains the title of the plot.
args contains what was specified on the command line.

This function build a figure and a legend, which can be plotted or saved as an image file.
"""
def MakeFig(data,labels,title,args):
    rows=len(data)
    cols=len(data[0])
    xmin=min(data[:,0])
    xmax=max(data[:,0])
    fig=plt.figure(args.InFile.name)
    fig.set_size_inches(16.0,9.0)
    fig.set_dpi(120)
    plt.style.use("classic")
#    plt.style.use("default")
    plt.plot(data[:,0],data[:,-1],'-',color="Black",label=labels[-1],linewidth=2.5)
    color_idx=np.linspace(0,1,cols-2)
    for i,j in zip(range(cols-2,0,-1),color_idx):
        lab=re.sub(r"([a-z])(\d\d)",r"\g<1>^\g<2>",labels[i-1])
        lab=re.sub(r"([a-z])(\d\()",r"\g<1>^\g<2>",lab)
        lab=re.sub(r"(\d)([A-Z])",r"^\g<1>\\rm{\g<2>}",lab)
        lab=re.sub(r"([¹²])([A-Z])",r"\g<1>\\rm{\g<2>}",lab)
        plt.plot(data[:,0],data[:,i],'-',color=plt.cm.gist_rainbow(j),label='$'+lab+'$',linewidth=2.5)
#    plt.title(args.InFile.name)
    if(args.Title):
        plt.title('$'+title+'$',fontsize=12)
    plt.ylim(ymin=1e-6)
    plt.xlim(xmin,xmax)
#    plt.grid(which='major',linestyle='-',linewidth='0.3')
    fontsize=12
    if(args.a):
        fontsize=args.a
    plt.xlabel(r'energy (eV/u)',fontsize=fontsize)
    plt.ylabel(r'cross section (10$^{-16}$ cm$^{2}$)',fontsize=fontsize)
    plt.xscale('log',basex=10)
    plt.yscale('log',basey=10)
#    leg=plt.legend(loc=2,bbox_to_anchor=(1.005,1.00),frameon=False)
    if(args.l):
        fsize=args.l
    else:
        fsize="large"
        if(cols>24 and cols<31):fsize="medium"
        elif(cols>30 and cols<39):fsize="small"
        elif(cols>38 and cols<43):fsize="x-small"
        elif(cols>42 and cols<46):fsize="xx-small"
        elif(cols>45 and cols<48): fsize=4
        elif(cols>47):fsize=3
    leg=plt.legend(loc=6,bbox_to_anchor=(1.0,0.50),frameon=False,fontsize=fsize)
    return fig,leg
    
def main(argv):
    matplotlib.rcParams['text.usetex']=True
    matplotlib.rcParams['text.latex.unicode']=True
    reload(sys)
    sys.setdefaultencoding('utf8')
    rc('font',**{'family':'serif','serif':['Times New Roman']})
    rc('text', usetex=True)

    args=MainMenu(argv)
#read it to get labels from comments
    linenum=0
    with io.open(args.InFile.name,encoding="utf-8",errors="ignore") as f:
        for line in f:
            if(linenum==2):
                title=re.sub('^# ','',line).rstrip()
                title=re.sub("\^(\w+)\+","^{\g<1>+}",title) # This puts brackets around the superscripts.
                title=re.sub(r"(\w+)",r"\\rm{\g<1>}",title) # This puts "\rm{}" around the alphanums to remove formatting.
                title=re.sub(r"->",r"\\rightarrow",title).replace(" ","") # This replaces "->" with "\rightarrow"
            if(line.strip().startswith("# (eV/u)")):
#                line=re.sub(r"([A-Z]+)",r"\\rm{\g<1>}",line)
                labels=line.split()
            linenum=linenum+1
    f.close()
#load the data from input
    data=np.loadtxt(args.InFile)

    fig,leg=MakeFig(data,labels[2:],title,args)

    if(args.quiet==False):
        plt.show()
    if(args.ImgFile):
        fig.savefig(args.ImgFile,dpi=120,bbox_inches="tight")

if __name__=="__main__":
    main(sys.argv[1:])
